/*
 * generated by Xtext 2.16.0
 */
grammar InternalElemental;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.benjholla.elemental.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.benjholla.elemental.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.benjholla.elemental.services.ElementalGrammarAccess;

}
@parser::members {
	private ElementalGrammarAccess grammarAccess;

	public void setGrammarAccess(ElementalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
		(rule__Instruction__Alternatives)
		{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIncrement
entryRuleIncrement
:
{ before(grammarAccess.getIncrementRule()); }
	 ruleIncrement
{ after(grammarAccess.getIncrementRule()); } 
	 EOF 
;

// Rule Increment
ruleIncrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncrementAccess().getPlusSignKeyword()); }
		'+'
		{ after(grammarAccess.getIncrementAccess().getPlusSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecrement
entryRuleDecrement
:
{ before(grammarAccess.getDecrementRule()); }
	 ruleDecrement
{ after(grammarAccess.getDecrementRule()); } 
	 EOF 
;

// Rule Decrement
ruleDecrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecrementAccess().getHyphenMinusKeyword()); }
		'-'
		{ after(grammarAccess.getDecrementAccess().getHyphenMinusKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveLeft
entryRuleMoveLeft
:
{ before(grammarAccess.getMoveLeftRule()); }
	 ruleMoveLeft
{ after(grammarAccess.getMoveLeftRule()); } 
	 EOF 
;

// Rule MoveLeft
ruleMoveLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveLeftAccess().getLessThanSignKeyword()); }
		'<'
		{ after(grammarAccess.getMoveLeftAccess().getLessThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveRight
entryRuleMoveRight
:
{ before(grammarAccess.getMoveRightRule()); }
	 ruleMoveRight
{ after(grammarAccess.getMoveRightRule()); } 
	 EOF 
;

// Rule MoveRight
ruleMoveRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveRightAccess().getGreaterThanSignKeyword()); }
		'>'
		{ after(grammarAccess.getMoveRightAccess().getGreaterThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getCommaKeyword()); }
		','
		{ after(grammarAccess.getStoreAccess().getCommaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRecall
entryRuleRecall
:
{ before(grammarAccess.getRecallRule()); }
	 ruleRecall
{ after(grammarAccess.getRecallRule()); } 
	 EOF 
;

// Rule Recall
ruleRecall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecallAccess().getFullStopKeyword()); }
		'.'
		{ after(grammarAccess.getRecallAccess().getFullStopKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword()); }
		'='
		{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBranch
entryRuleBranch
:
{ before(grammarAccess.getBranchRule()); }
	 ruleBranch
{ after(grammarAccess.getBranchRule()); } 
	 EOF 
;

// Rule Branch
ruleBranch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBranchAccess().getGroup()); }
		(rule__Branch__Group__0)
		{ after(grammarAccess.getBranchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGOTO
entryRuleGOTO
:
{ before(grammarAccess.getGOTORule()); }
	 ruleGOTO
{ after(grammarAccess.getGOTORule()); } 
	 EOF 
;

// Rule GOTO
ruleGOTO 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGOTOAccess().getGroup()); }
		(rule__GOTO__Group__0)
		{ after(grammarAccess.getGOTOAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComputedGOTO
entryRuleComputedGOTO
:
{ before(grammarAccess.getComputedGOTORule()); }
	 ruleComputedGOTO
{ after(grammarAccess.getComputedGOTORule()); } 
	 EOF 
;

// Rule ComputedGOTO
ruleComputedGOTO 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComputedGOTOAccess().getAmpersandKeyword()); }
		'&'
		{ after(grammarAccess.getComputedGOTOAccess().getAmpersandKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStaticDispatch
entryRuleStaticDispatch
:
{ before(grammarAccess.getStaticDispatchRule()); }
	 ruleStaticDispatch
{ after(grammarAccess.getStaticDispatchRule()); } 
	 EOF 
;

// Rule StaticDispatch
ruleStaticDispatch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStaticDispatchAccess().getGroup()); }
		(rule__StaticDispatch__Group__0)
		{ after(grammarAccess.getStaticDispatchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDynamicDispatch
entryRuleDynamicDispatch
:
{ before(grammarAccess.getDynamicDispatchRule()); }
	 ruleDynamicDispatch
{ after(grammarAccess.getDynamicDispatchRule()); } 
	 EOF 
;

// Rule DynamicDispatch
ruleDynamicDispatch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDynamicDispatchAccess().getQuestionMarkKeyword()); }
		'?'
		{ after(grammarAccess.getDynamicDispatchAccess().getQuestionMarkKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getGroup_0()); }
		(rule__Instruction__Group_0__0)
		{ after(grammarAccess.getInstructionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGroup_1()); }
		(rule__Instruction__Group_1__0)
		{ after(grammarAccess.getInstructionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGroup_2()); }
		(rule__Instruction__Group_2__0)
		{ after(grammarAccess.getInstructionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGroup_3()); }
		(rule__Instruction__Group_3__0)
		{ after(grammarAccess.getInstructionAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGroup_4()); }
		(rule__Instruction__Group_4__0)
		{ after(grammarAccess.getInstructionAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGroup_5()); }
		(rule__Instruction__Group_5__0)
		{ after(grammarAccess.getInstructionAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGroup_6()); }
		(rule__Instruction__Group_6__0)
		{ after(grammarAccess.getInstructionAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getBranchParserRuleCall_7()); }
		ruleBranch
		{ after(grammarAccess.getInstructionAccess().getBranchParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getLoopParserRuleCall_8()); }
		ruleLoop
		{ after(grammarAccess.getInstructionAccess().getLoopParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGOTOParserRuleCall_9()); }
		ruleGOTO
		{ after(grammarAccess.getInstructionAccess().getGOTOParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGroup_10()); }
		(rule__Instruction__Group_10__0)
		{ after(grammarAccess.getInstructionAccess().getGroup_10()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getStaticDispatchParserRuleCall_11()); }
		ruleStaticDispatch
		{ after(grammarAccess.getInstructionAccess().getStaticDispatchParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGroup_12()); }
		(rule__Instruction__Group_12__0)
		{ after(grammarAccess.getInstructionAccess().getGroup_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getImplicitFunctionAssignment_0()); }
	(rule__Model__ImplicitFunctionAssignment_0)
	{ after(grammarAccess.getModelAccess().getImplicitFunctionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getExplicitFunctionsAssignment_1()); }
	(rule__Model__ExplicitFunctionsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getExplicitFunctionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getInstructionsAssignment_1()); }
	(rule__Block__InstructionsAssignment_1)*
	{ after(grammarAccess.getBlockAccess().getInstructionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
	(rule__Function__NameAssignment_0)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getBodyAssignment_2()); }
	(rule__Function__BodyAssignment_2)
	{ after(grammarAccess.getFunctionAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_0__0__Impl
	rule__Instruction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAction_0_0()); }
	()
	{ after(grammarAccess.getInstructionAccess().getInstructionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getIncrementParserRuleCall_0_1()); }
	ruleIncrement
	{ after(grammarAccess.getInstructionAccess().getIncrementParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_1__0__Impl
	rule__Instruction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAction_1_0()); }
	()
	{ after(grammarAccess.getInstructionAccess().getInstructionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getDecrementParserRuleCall_1_1()); }
	ruleDecrement
	{ after(grammarAccess.getInstructionAccess().getDecrementParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_2__0__Impl
	rule__Instruction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAction_2_0()); }
	()
	{ after(grammarAccess.getInstructionAccess().getInstructionAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getMoveLeftParserRuleCall_2_1()); }
	ruleMoveLeft
	{ after(grammarAccess.getInstructionAccess().getMoveLeftParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_3__0__Impl
	rule__Instruction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAction_3_0()); }
	()
	{ after(grammarAccess.getInstructionAccess().getInstructionAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getMoveRightParserRuleCall_3_1()); }
	ruleMoveRight
	{ after(grammarAccess.getInstructionAccess().getMoveRightParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_4__0__Impl
	rule__Instruction__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAction_4_0()); }
	()
	{ after(grammarAccess.getInstructionAccess().getInstructionAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getStoreParserRuleCall_4_1()); }
	ruleStore
	{ after(grammarAccess.getInstructionAccess().getStoreParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_5__0__Impl
	rule__Instruction__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAction_5_0()); }
	()
	{ after(grammarAccess.getInstructionAccess().getInstructionAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getRecallParserRuleCall_5_1()); }
	ruleRecall
	{ after(grammarAccess.getInstructionAccess().getRecallParserRuleCall_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_6__0__Impl
	rule__Instruction__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAction_6_0()); }
	()
	{ after(grammarAccess.getInstructionAccess().getInstructionAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getAssignmentParserRuleCall_6_1()); }
	ruleAssignment
	{ after(grammarAccess.getInstructionAccess().getAssignmentParserRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_10__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_10__0__Impl
	rule__Instruction__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_10__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAction_10_0()); }
	()
	{ after(grammarAccess.getInstructionAccess().getInstructionAction_10_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_10__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_10__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getComputedGOTOParserRuleCall_10_1()); }
	ruleComputedGOTO
	{ after(grammarAccess.getInstructionAccess().getComputedGOTOParserRuleCall_10_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_12__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_12__0__Impl
	rule__Instruction__Group_12__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_12__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAction_12_0()); }
	()
	{ after(grammarAccess.getInstructionAccess().getInstructionAction_12_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_12__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_12__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_12__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getDynamicDispatchParserRuleCall_12_1()); }
	ruleDynamicDispatch
	{ after(grammarAccess.getInstructionAccess().getDynamicDispatchParserRuleCall_12_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Branch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__0__Impl
	rule__Branch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getBranchAction_0()); }
	()
	{ after(grammarAccess.getBranchAccess().getBranchAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__1__Impl
	rule__Branch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getBranchAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__2__Impl
	rule__Branch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getBodyAssignment_2()); }
	(rule__Branch__BodyAssignment_2)
	{ after(grammarAccess.getBranchAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getBranchAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLoopAction_0()); }
	()
	{ after(grammarAccess.getLoopAccess().getLoopAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getBodyAssignment_2()); }
	(rule__Loop__BodyAssignment_2)
	{ after(grammarAccess.getLoopAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getLoopAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GOTO__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GOTO__Group__0__Impl
	rule__GOTO__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGOTOAccess().getApostropheKeyword_0()); }
	'\''
	{ after(grammarAccess.getGOTOAccess().getApostropheKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GOTO__Group__1__Impl
	rule__GOTO__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGOTOAccess().getLabelAssignment_1()); }
	(rule__GOTO__LabelAssignment_1)
	{ after(grammarAccess.getGOTOAccess().getLabelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GOTO__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGOTOAccess().getApostropheKeyword_2()); }
	'\''
	{ after(grammarAccess.getGOTOAccess().getApostropheKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StaticDispatch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticDispatch__Group__0__Impl
	rule__StaticDispatch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticDispatchAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getStaticDispatchAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticDispatch__Group__1__Impl
	rule__StaticDispatch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticDispatchAccess().getTargetAssignment_1()); }
	(rule__StaticDispatch__TargetAssignment_1)
	{ after(grammarAccess.getStaticDispatchAccess().getTargetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticDispatch__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticDispatchAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getStaticDispatchAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ImplicitFunctionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getImplicitFunctionBlockParserRuleCall_0_0()); }
		ruleBlock
		{ after(grammarAccess.getModelAccess().getImplicitFunctionBlockParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ExplicitFunctionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getExplicitFunctionsFunctionParserRuleCall_1_0()); }
		ruleFunction
		{ after(grammarAccess.getModelAccess().getExplicitFunctionsFunctionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__InstructionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_1_0()); }
		ruleInstruction
		{ after(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getBodyBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getFunctionAccess().getBodyBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBranchAccess().getBodyBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getBranchAccess().getBodyBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getBodyBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getLoopAccess().getBodyBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__LabelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGOTOAccess().getLabelLabelCrossReference_1_0()); }
		(
			{ before(grammarAccess.getGOTOAccess().getLabelLabelIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getGOTOAccess().getLabelLabelIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getGOTOAccess().getLabelLabelCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__TargetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStaticDispatchAccess().getTargetFunctionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getStaticDispatchAccess().getTargetFunctionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStaticDispatchAccess().getTargetFunctionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getStaticDispatchAccess().getTargetFunctionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : ('0'..'9')*;

RULE_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WHITESPACE : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
