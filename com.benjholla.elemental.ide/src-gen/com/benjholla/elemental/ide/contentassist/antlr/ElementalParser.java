/*
 * generated by Xtext 2.16.0
 */
package com.benjholla.elemental.ide.contentassist.antlr;

import com.benjholla.elemental.ide.contentassist.antlr.internal.InternalElementalParser;
import com.benjholla.elemental.services.ElementalGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ElementalParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ElementalGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ElementalGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getTypeAlternatives_0(), "rule__Instruction__TypeAlternatives_0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getIncrementAccess().getGroup(), "rule__Increment__Group__0");
			builder.put(grammarAccess.getDecrementAccess().getGroup(), "rule__Decrement__Group__0");
			builder.put(grammarAccess.getMoveLeftAccess().getGroup(), "rule__MoveLeft__Group__0");
			builder.put(grammarAccess.getMoveRightAccess().getGroup(), "rule__MoveRight__Group__0");
			builder.put(grammarAccess.getStoreAccess().getGroup(), "rule__Store__Group__0");
			builder.put(grammarAccess.getRecallAccess().getGroup(), "rule__Recall__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getBranchAccess().getGroup(), "rule__Branch__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
			builder.put(grammarAccess.getGOTOAccess().getGroup(), "rule__GOTO__Group__0");
			builder.put(grammarAccess.getComputedGOTOAccess().getGroup(), "rule__ComputedGOTO__Group__0");
			builder.put(grammarAccess.getStaticDispatchAccess().getGroup(), "rule__StaticDispatch__Group__0");
			builder.put(grammarAccess.getDynamicDispatchAccess().getGroup(), "rule__DynamicDispatch__Group__0");
			builder.put(grammarAccess.getModelAccess().getImplicitFunctionAssignment_0(), "rule__Model__ImplicitFunctionAssignment_0");
			builder.put(grammarAccess.getModelAccess().getExplicitFunctionsAssignment_1(), "rule__Model__ExplicitFunctionsAssignment_1");
			builder.put(grammarAccess.getBlockAccess().getInstructionsAssignment_1(), "rule__Block__InstructionsAssignment_1");
			builder.put(grammarAccess.getLabelAccess().getNameAssignment_1(), "rule__Label__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_0(), "rule__Function__NameAssignment_0");
			builder.put(grammarAccess.getFunctionAccess().getBodyAssignment_2(), "rule__Function__BodyAssignment_2");
			builder.put(grammarAccess.getInstructionAccess().getTypeAssignment(), "rule__Instruction__TypeAssignment");
			builder.put(grammarAccess.getBranchAccess().getBodyAssignment_2(), "rule__Branch__BodyAssignment_2");
			builder.put(grammarAccess.getLoopAccess().getBodyAssignment_2(), "rule__Loop__BodyAssignment_2");
			builder.put(grammarAccess.getGOTOAccess().getLabelAssignment_2(), "rule__GOTO__LabelAssignment_2");
			builder.put(grammarAccess.getStaticDispatchAccess().getTargetAssignment_2(), "rule__StaticDispatch__TargetAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ElementalGrammarAccess grammarAccess;

	@Override
	protected InternalElementalParser createParser() {
		InternalElementalParser result = new InternalElementalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WHITESPACE", "RULE_COMMENT" };
	}

	public ElementalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ElementalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
