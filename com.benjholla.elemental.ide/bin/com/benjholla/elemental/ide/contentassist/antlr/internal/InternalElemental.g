/*
 * generated by Xtext 2.16.0
 */
grammar InternalElemental;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.benjholla.elemental.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.benjholla.elemental.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.benjholla.elemental.services.ElementalGrammarAccess;

}
@parser::members {
	private ElementalGrammarAccess grammarAccess;

	public void setGrammarAccess(ElementalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getTypeAssignment()); }
		(rule__Instruction__TypeAssignment)
		{ after(grammarAccess.getInstructionAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIncrement
entryRuleIncrement
:
{ before(grammarAccess.getIncrementRule()); }
	 ruleIncrement
{ after(grammarAccess.getIncrementRule()); } 
	 EOF 
;

// Rule Increment
ruleIncrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncrementAccess().getGroup()); }
		(rule__Increment__Group__0)
		{ after(grammarAccess.getIncrementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecrement
entryRuleDecrement
:
{ before(grammarAccess.getDecrementRule()); }
	 ruleDecrement
{ after(grammarAccess.getDecrementRule()); } 
	 EOF 
;

// Rule Decrement
ruleDecrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecrementAccess().getGroup()); }
		(rule__Decrement__Group__0)
		{ after(grammarAccess.getDecrementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveLeft
entryRuleMoveLeft
:
{ before(grammarAccess.getMoveLeftRule()); }
	 ruleMoveLeft
{ after(grammarAccess.getMoveLeftRule()); } 
	 EOF 
;

// Rule MoveLeft
ruleMoveLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveLeftAccess().getGroup()); }
		(rule__MoveLeft__Group__0)
		{ after(grammarAccess.getMoveLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveRight
entryRuleMoveRight
:
{ before(grammarAccess.getMoveRightRule()); }
	 ruleMoveRight
{ after(grammarAccess.getMoveRightRule()); } 
	 EOF 
;

// Rule MoveRight
ruleMoveRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveRightAccess().getGroup()); }
		(rule__MoveRight__Group__0)
		{ after(grammarAccess.getMoveRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getGroup()); }
		(rule__Store__Group__0)
		{ after(grammarAccess.getStoreAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRecall
entryRuleRecall
:
{ before(grammarAccess.getRecallRule()); }
	 ruleRecall
{ after(grammarAccess.getRecallRule()); } 
	 EOF 
;

// Rule Recall
ruleRecall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecallAccess().getGroup()); }
		(rule__Recall__Group__0)
		{ after(grammarAccess.getRecallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBranch
entryRuleBranch
:
{ before(grammarAccess.getBranchRule()); }
	 ruleBranch
{ after(grammarAccess.getBranchRule()); } 
	 EOF 
;

// Rule Branch
ruleBranch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBranchAccess().getGroup()); }
		(rule__Branch__Group__0)
		{ after(grammarAccess.getBranchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGOTO
entryRuleGOTO
:
{ before(grammarAccess.getGOTORule()); }
	 ruleGOTO
{ after(grammarAccess.getGOTORule()); } 
	 EOF 
;

// Rule GOTO
ruleGOTO 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGOTOAccess().getGroup()); }
		(rule__GOTO__Group__0)
		{ after(grammarAccess.getGOTOAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComputedGOTO
entryRuleComputedGOTO
:
{ before(grammarAccess.getComputedGOTORule()); }
	 ruleComputedGOTO
{ after(grammarAccess.getComputedGOTORule()); } 
	 EOF 
;

// Rule ComputedGOTO
ruleComputedGOTO 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComputedGOTOAccess().getGroup()); }
		(rule__ComputedGOTO__Group__0)
		{ after(grammarAccess.getComputedGOTOAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStaticDispatch
entryRuleStaticDispatch
:
{ before(grammarAccess.getStaticDispatchRule()); }
	 ruleStaticDispatch
{ after(grammarAccess.getStaticDispatchRule()); } 
	 EOF 
;

// Rule StaticDispatch
ruleStaticDispatch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStaticDispatchAccess().getGroup()); }
		(rule__StaticDispatch__Group__0)
		{ after(grammarAccess.getStaticDispatchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDynamicDispatch
entryRuleDynamicDispatch
:
{ before(grammarAccess.getDynamicDispatchRule()); }
	 ruleDynamicDispatch
{ after(grammarAccess.getDynamicDispatchRule()); } 
	 EOF 
;

// Rule DynamicDispatch
ruleDynamicDispatch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDynamicDispatchAccess().getGroup()); }
		(rule__DynamicDispatch__Group__0)
		{ after(grammarAccess.getDynamicDispatchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getTypeIncrementParserRuleCall_0_0()); }
		ruleIncrement
		{ after(grammarAccess.getInstructionAccess().getTypeIncrementParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeDecrementParserRuleCall_0_1()); }
		ruleDecrement
		{ after(grammarAccess.getInstructionAccess().getTypeDecrementParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeMoveLeftParserRuleCall_0_2()); }
		ruleMoveLeft
		{ after(grammarAccess.getInstructionAccess().getTypeMoveLeftParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeMoveRightParserRuleCall_0_3()); }
		ruleMoveRight
		{ after(grammarAccess.getInstructionAccess().getTypeMoveRightParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeStoreParserRuleCall_0_4()); }
		ruleStore
		{ after(grammarAccess.getInstructionAccess().getTypeStoreParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeRecallParserRuleCall_0_5()); }
		ruleRecall
		{ after(grammarAccess.getInstructionAccess().getTypeRecallParserRuleCall_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeAssignmentParserRuleCall_0_6()); }
		ruleAssignment
		{ after(grammarAccess.getInstructionAccess().getTypeAssignmentParserRuleCall_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeBranchParserRuleCall_0_7()); }
		ruleBranch
		{ after(grammarAccess.getInstructionAccess().getTypeBranchParserRuleCall_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeLoopParserRuleCall_0_8()); }
		ruleLoop
		{ after(grammarAccess.getInstructionAccess().getTypeLoopParserRuleCall_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeGOTOParserRuleCall_0_9()); }
		ruleGOTO
		{ after(grammarAccess.getInstructionAccess().getTypeGOTOParserRuleCall_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeComputedGOTOParserRuleCall_0_10()); }
		ruleComputedGOTO
		{ after(grammarAccess.getInstructionAccess().getTypeComputedGOTOParserRuleCall_0_10()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeStaticDispatchParserRuleCall_0_11()); }
		ruleStaticDispatch
		{ after(grammarAccess.getInstructionAccess().getTypeStaticDispatchParserRuleCall_0_11()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getTypeDynamicDispatchParserRuleCall_0_12()); }
		ruleDynamicDispatch
		{ after(grammarAccess.getInstructionAccess().getTypeDynamicDispatchParserRuleCall_0_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getImplicitFunctionAssignment_0()); }
	(rule__Model__ImplicitFunctionAssignment_0)
	{ after(grammarAccess.getModelAccess().getImplicitFunctionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getExplicitFunctionsAssignment_1()); }
	(rule__Model__ExplicitFunctionsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getExplicitFunctionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getInstructionsAssignment_1()); }
	(rule__Block__InstructionsAssignment_1)*
	{ after(grammarAccess.getBlockAccess().getInstructionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
	(rule__Function__NameAssignment_0)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getBodyAssignment_2()); }
	(rule__Function__BodyAssignment_2)
	{ after(grammarAccess.getFunctionAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Increment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__0__Impl
	rule__Increment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getIncrementAction_0()); }
	()
	{ after(grammarAccess.getIncrementAccess().getIncrementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getPlusSignKeyword_1()); }
	'+'
	{ after(grammarAccess.getIncrementAccess().getPlusSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Decrement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__0__Impl
	rule__Decrement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getDecrementAction_0()); }
	()
	{ after(grammarAccess.getDecrementAccess().getDecrementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getHyphenMinusKeyword_1()); }
	'-'
	{ after(grammarAccess.getDecrementAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveLeft__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveLeft__Group__0__Impl
	rule__MoveLeft__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveLeft__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveLeftAccess().getMoveLeftAction_0()); }
	()
	{ after(grammarAccess.getMoveLeftAccess().getMoveLeftAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveLeft__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveLeft__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveLeft__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveLeftAccess().getLessThanSignKeyword_1()); }
	'<'
	{ after(grammarAccess.getMoveLeftAccess().getLessThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveRight__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveRight__Group__0__Impl
	rule__MoveRight__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveRight__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveRightAccess().getMoveRightAction_0()); }
	()
	{ after(grammarAccess.getMoveRightAccess().getMoveRightAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveRight__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveRight__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveRight__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveRightAccess().getGreaterThanSignKeyword_1()); }
	'>'
	{ after(grammarAccess.getMoveRightAccess().getGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__0__Impl
	rule__Store__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getStoreAction_0()); }
	()
	{ after(grammarAccess.getStoreAccess().getStoreAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getCommaKeyword_1()); }
	','
	{ after(grammarAccess.getStoreAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Recall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recall__Group__0__Impl
	rule__Recall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Recall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecallAccess().getRecallAction_0()); }
	()
	{ after(grammarAccess.getRecallAccess().getRecallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Recall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecallAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getRecallAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getAssignmentAction_0()); }
	()
	{ after(grammarAccess.getAssignmentAccess().getAssignmentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Branch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__0__Impl
	rule__Branch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getBranchAction_0()); }
	()
	{ after(grammarAccess.getBranchAccess().getBranchAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__1__Impl
	rule__Branch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getBranchAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__2__Impl
	rule__Branch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getBodyAssignment_2()); }
	(rule__Branch__BodyAssignment_2)
	{ after(grammarAccess.getBranchAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Branch__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBranchAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getBranchAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLoopAction_0()); }
	()
	{ after(grammarAccess.getLoopAccess().getLoopAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getBodyAssignment_2()); }
	(rule__Loop__BodyAssignment_2)
	{ after(grammarAccess.getLoopAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getLoopAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GOTO__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GOTO__Group__0__Impl
	rule__GOTO__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGOTOAccess().getGOTOAction_0()); }
	()
	{ after(grammarAccess.getGOTOAccess().getGOTOAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GOTO__Group__1__Impl
	rule__GOTO__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGOTOAccess().getApostropheKeyword_1()); }
	'\''
	{ after(grammarAccess.getGOTOAccess().getApostropheKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GOTO__Group__2__Impl
	rule__GOTO__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGOTOAccess().getLabelAssignment_2()); }
	(rule__GOTO__LabelAssignment_2)
	{ after(grammarAccess.getGOTOAccess().getLabelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GOTO__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGOTOAccess().getApostropheKeyword_3()); }
	'\''
	{ after(grammarAccess.getGOTOAccess().getApostropheKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComputedGOTO__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputedGOTO__Group__0__Impl
	rule__ComputedGOTO__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputedGOTO__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputedGOTOAccess().getComputedGOTOAction_0()); }
	()
	{ after(grammarAccess.getComputedGOTOAccess().getComputedGOTOAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputedGOTO__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComputedGOTO__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComputedGOTO__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputedGOTOAccess().getAmpersandKeyword_1()); }
	'&'
	{ after(grammarAccess.getComputedGOTOAccess().getAmpersandKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StaticDispatch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticDispatch__Group__0__Impl
	rule__StaticDispatch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticDispatchAccess().getStaticDispatchAction_0()); }
	()
	{ after(grammarAccess.getStaticDispatchAccess().getStaticDispatchAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticDispatch__Group__1__Impl
	rule__StaticDispatch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticDispatchAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getStaticDispatchAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticDispatch__Group__2__Impl
	rule__StaticDispatch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticDispatchAccess().getTargetAssignment_2()); }
	(rule__StaticDispatch__TargetAssignment_2)
	{ after(grammarAccess.getStaticDispatchAccess().getTargetAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StaticDispatch__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStaticDispatchAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getStaticDispatchAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicDispatch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DynamicDispatch__Group__0__Impl
	rule__DynamicDispatch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicDispatch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicDispatchAccess().getDynamicDispatchAction_0()); }
	()
	{ after(grammarAccess.getDynamicDispatchAccess().getDynamicDispatchAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicDispatch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DynamicDispatch__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicDispatch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicDispatchAccess().getQuestionMarkKeyword_1()); }
	'?'
	{ after(grammarAccess.getDynamicDispatchAccess().getQuestionMarkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ImplicitFunctionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getImplicitFunctionBlockParserRuleCall_0_0()); }
		ruleBlock
		{ after(grammarAccess.getModelAccess().getImplicitFunctionBlockParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ExplicitFunctionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getExplicitFunctionsFunctionParserRuleCall_1_0()); }
		ruleFunction
		{ after(grammarAccess.getModelAccess().getExplicitFunctionsFunctionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__InstructionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_1_0()); }
		ruleInstruction
		{ after(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getBodyBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getFunctionAccess().getBodyBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getTypeAlternatives_0()); }
		(rule__Instruction__TypeAlternatives_0)
		{ after(grammarAccess.getInstructionAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Branch__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBranchAccess().getBodyBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getBranchAccess().getBodyBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getBodyBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getLoopAccess().getBodyBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GOTO__LabelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGOTOAccess().getLabelLabelCrossReference_2_0()); }
		(
			{ before(grammarAccess.getGOTOAccess().getLabelLabelIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getGOTOAccess().getLabelLabelIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getGOTOAccess().getLabelLabelCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticDispatch__TargetAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStaticDispatchAccess().getTargetFunctionCrossReference_2_0()); }
		(
			{ before(grammarAccess.getStaticDispatchAccess().getTargetFunctionIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStaticDispatchAccess().getTargetFunctionIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getStaticDispatchAccess().getTargetFunctionCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : ('0'..'9')*;

RULE_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WHITESPACE : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
