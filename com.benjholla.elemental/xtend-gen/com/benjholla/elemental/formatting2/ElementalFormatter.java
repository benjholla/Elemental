/**
 * generated by Xtext 2.16.0
 */
package com.benjholla.elemental.formatting2;

import com.benjholla.elemental.elemental.Block;
import com.benjholla.elemental.elemental.Function;
import com.benjholla.elemental.elemental.Instruction;
import com.benjholla.elemental.elemental.Program;
import com.benjholla.elemental.services.ElementalGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ElementalFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ElementalGrammarAccess _elementalGrammarAccess;
  
  protected void _format(final Program program, @Extension final IFormattableDocument document) {
    document.<Block>format(program.getImplicitFunction());
    EList<Function> _explicitFunctions = program.getExplicitFunctions();
    for (final Function function : _explicitFunctions) {
      document.<Function>format(function);
    }
  }
  
  protected void _format(final Block block, @Extension final IFormattableDocument document) {
    EList<Instruction> _instructions = block.getInstructions();
    for (final Instruction instruction : _instructions) {
      document.<Instruction>format(instruction);
    }
  }
  
  public void format(final Object block, final IFormattableDocument document) {
    if (block instanceof XtextResource) {
      _format((XtextResource)block, document);
      return;
    } else if (block instanceof Block) {
      _format((Block)block, document);
      return;
    } else if (block instanceof Program) {
      _format((Program)block, document);
      return;
    } else if (block instanceof EObject) {
      _format((EObject)block, document);
      return;
    } else if (block == null) {
      _format((Void)null, document);
      return;
    } else if (block != null) {
      _format(block, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(block, document).toString());
    }
  }
}
