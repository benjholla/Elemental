/**
 * generated by Xtext 2.16.0
 */
package com.benjholla.elemental.elemental.impl;

import com.benjholla.elemental.elemental.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ElementalFactoryImpl extends EFactoryImpl implements ElementalFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ElementalFactory init()
  {
    try
    {
      ElementalFactory theElementalFactory = (ElementalFactory)EPackage.Registry.INSTANCE.getEFactory(ElementalPackage.eNS_URI);
      if (theElementalFactory != null)
      {
        return theElementalFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ElementalFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementalFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ElementalPackage.PROGRAM: return createProgram();
      case ElementalPackage.BLOCK: return createBlock();
      case ElementalPackage.LABEL: return createLabel();
      case ElementalPackage.FUNCTION: return createFunction();
      case ElementalPackage.INSTRUCTION: return createInstruction();
      case ElementalPackage.INCREMENT: return createIncrement();
      case ElementalPackage.DECREMENT: return createDecrement();
      case ElementalPackage.MOVE_LEFT: return createMoveLeft();
      case ElementalPackage.MOVE_RIGHT: return createMoveRight();
      case ElementalPackage.STORE: return createStore();
      case ElementalPackage.RECALL: return createRecall();
      case ElementalPackage.ASSIGNMENT: return createAssignment();
      case ElementalPackage.BRANCH: return createBranch();
      case ElementalPackage.LOOP: return createLoop();
      case ElementalPackage.GOTO: return createGOTO();
      case ElementalPackage.COMPUTED_GOTO: return createComputedGOTO();
      case ElementalPackage.STATIC_DISPATCH: return createStaticDispatch();
      case ElementalPackage.DYNAMIC_DISPATCH: return createDynamicDispatch();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Label createLabel()
  {
    LabelImpl label = new LabelImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Increment createIncrement()
  {
    IncrementImpl increment = new IncrementImpl();
    return increment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decrement createDecrement()
  {
    DecrementImpl decrement = new DecrementImpl();
    return decrement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveLeft createMoveLeft()
  {
    MoveLeftImpl moveLeft = new MoveLeftImpl();
    return moveLeft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveRight createMoveRight()
  {
    MoveRightImpl moveRight = new MoveRightImpl();
    return moveRight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Store createStore()
  {
    StoreImpl store = new StoreImpl();
    return store;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Recall createRecall()
  {
    RecallImpl recall = new RecallImpl();
    return recall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Branch createBranch()
  {
    BranchImpl branch = new BranchImpl();
    return branch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Loop createLoop()
  {
    LoopImpl loop = new LoopImpl();
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GOTO createGOTO()
  {
    GOTOImpl goto_ = new GOTOImpl();
    return goto_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComputedGOTO createComputedGOTO()
  {
    ComputedGOTOImpl computedGOTO = new ComputedGOTOImpl();
    return computedGOTO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StaticDispatch createStaticDispatch()
  {
    StaticDispatchImpl staticDispatch = new StaticDispatchImpl();
    return staticDispatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DynamicDispatch createDynamicDispatch()
  {
    DynamicDispatchImpl dynamicDispatch = new DynamicDispatchImpl();
    return dynamicDispatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementalPackage getElementalPackage()
  {
    return (ElementalPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ElementalPackage getPackage()
  {
    return ElementalPackage.eINSTANCE;
  }

} //ElementalFactoryImpl
