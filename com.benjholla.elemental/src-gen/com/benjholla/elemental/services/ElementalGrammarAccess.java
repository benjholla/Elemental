/*
 * generated by Xtext 2.16.0
 */
package com.benjholla.elemental.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ElementalGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImplicitFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImplicitFunctionBlockParserRuleCall_0_0 = (RuleCall)cImplicitFunctionAssignment_0.eContents().get(0);
		private final Assignment cExplicitFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExplicitFunctionsFunctionParserRuleCall_1_0 = (RuleCall)cExplicitFunctionsAssignment_1.eContents().get(0);
		
		//Model:
		//	implicitFunction=Block
		//	explicitFunctions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//implicitFunction=Block explicitFunctions+=Function*
		public Group getGroup() { return cGroup; }
		
		//implicitFunction=Block
		public Assignment getImplicitFunctionAssignment_0() { return cImplicitFunctionAssignment_0; }
		
		//Block
		public RuleCall getImplicitFunctionBlockParserRuleCall_0_0() { return cImplicitFunctionBlockParserRuleCall_0_0; }
		
		//explicitFunctions+=Function*
		public Assignment getExplicitFunctionsAssignment_1() { return cExplicitFunctionsAssignment_1; }
		
		//Function
		public RuleCall getExplicitFunctionsFunctionParserRuleCall_1_0() { return cExplicitFunctionsFunctionParserRuleCall_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		
		//Block:
		//	{Block} instructions+=Instruction*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} instructions+=Instruction*
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Label:
		//	'"' name=ID '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"' name=ID '"'
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Function:
		//	name=ID ':' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' body=Block
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInstructionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cIncrementParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInstructionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDecrementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInstructionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cMoveLeftParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInstructionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cMoveRightParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cInstructionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cStoreParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cInstructionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cRecallParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cInstructionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cBranchParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLoopParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cGOTOParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cInstructionAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final RuleCall cComputedGOTOParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final RuleCall cStaticDispatchParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cInstructionAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final RuleCall cDynamicDispatchParserRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		
		//Instruction:
		//	{Instruction} Increment
		//	| {Instruction} Decrement
		//	| {Instruction} MoveLeft
		//	| {Instruction} MoveRight
		//	| {Instruction} Store
		//	| {Instruction} Recall
		//	| {Instruction} Assignment
		//	| Branch
		//	| Loop
		//	| GOTO
		//	| {Instruction} ComputedGOTO
		//	| StaticDispatch
		//	| {Instruction} DynamicDispatch;
		@Override public ParserRule getRule() { return rule; }
		
		//{Instruction} Increment | {Instruction} Decrement | {Instruction} MoveLeft | {Instruction} MoveRight | {Instruction}
		//Store | {Instruction} Recall | {Instruction} Assignment | Branch | Loop | GOTO | {Instruction} ComputedGOTO |
		//StaticDispatch | {Instruction} DynamicDispatch
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Instruction} Increment
		public Group getGroup_0() { return cGroup_0; }
		
		//{Instruction}
		public Action getInstructionAction_0_0() { return cInstructionAction_0_0; }
		
		//Increment
		public RuleCall getIncrementParserRuleCall_0_1() { return cIncrementParserRuleCall_0_1; }
		
		//{Instruction} Decrement
		public Group getGroup_1() { return cGroup_1; }
		
		//{Instruction}
		public Action getInstructionAction_1_0() { return cInstructionAction_1_0; }
		
		//Decrement
		public RuleCall getDecrementParserRuleCall_1_1() { return cDecrementParserRuleCall_1_1; }
		
		//{Instruction} MoveLeft
		public Group getGroup_2() { return cGroup_2; }
		
		//{Instruction}
		public Action getInstructionAction_2_0() { return cInstructionAction_2_0; }
		
		//MoveLeft
		public RuleCall getMoveLeftParserRuleCall_2_1() { return cMoveLeftParserRuleCall_2_1; }
		
		//{Instruction} MoveRight
		public Group getGroup_3() { return cGroup_3; }
		
		//{Instruction}
		public Action getInstructionAction_3_0() { return cInstructionAction_3_0; }
		
		//MoveRight
		public RuleCall getMoveRightParserRuleCall_3_1() { return cMoveRightParserRuleCall_3_1; }
		
		//{Instruction} Store
		public Group getGroup_4() { return cGroup_4; }
		
		//{Instruction}
		public Action getInstructionAction_4_0() { return cInstructionAction_4_0; }
		
		//Store
		public RuleCall getStoreParserRuleCall_4_1() { return cStoreParserRuleCall_4_1; }
		
		//{Instruction} Recall
		public Group getGroup_5() { return cGroup_5; }
		
		//{Instruction}
		public Action getInstructionAction_5_0() { return cInstructionAction_5_0; }
		
		//Recall
		public RuleCall getRecallParserRuleCall_5_1() { return cRecallParserRuleCall_5_1; }
		
		//{Instruction} Assignment
		public Group getGroup_6() { return cGroup_6; }
		
		//{Instruction}
		public Action getInstructionAction_6_0() { return cInstructionAction_6_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_6_1() { return cAssignmentParserRuleCall_6_1; }
		
		//Branch
		public RuleCall getBranchParserRuleCall_7() { return cBranchParserRuleCall_7; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_8() { return cLoopParserRuleCall_8; }
		
		//GOTO
		public RuleCall getGOTOParserRuleCall_9() { return cGOTOParserRuleCall_9; }
		
		//{Instruction} ComputedGOTO
		public Group getGroup_10() { return cGroup_10; }
		
		//{Instruction}
		public Action getInstructionAction_10_0() { return cInstructionAction_10_0; }
		
		//ComputedGOTO
		public RuleCall getComputedGOTOParserRuleCall_10_1() { return cComputedGOTOParserRuleCall_10_1; }
		
		//StaticDispatch
		public RuleCall getStaticDispatchParserRuleCall_11() { return cStaticDispatchParserRuleCall_11; }
		
		//{Instruction} DynamicDispatch
		public Group getGroup_12() { return cGroup_12; }
		
		//{Instruction}
		public Action getInstructionAction_12_0() { return cInstructionAction_12_0; }
		
		//DynamicDispatch
		public RuleCall getDynamicDispatchParserRuleCall_12_1() { return cDynamicDispatchParserRuleCall_12_1; }
	}
	public class IncrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Increment");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//Increment:
		//	'+';
		@Override public ParserRule getRule() { return rule; }
		
		//'+'
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}
	public class DecrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Decrement");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//Decrement:
		//	'-';
		@Override public ParserRule getRule() { return rule; }
		
		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}
	public class MoveLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.MoveLeft");
		private final Keyword cLessThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MoveLeft:
		//	'<';
		@Override public ParserRule getRule() { return rule; }
		
		//'<'
		public Keyword getLessThanSignKeyword() { return cLessThanSignKeyword; }
	}
	public class MoveRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.MoveRight");
		private final Keyword cGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MoveRight:
		//	'>';
		@Override public ParserRule getRule() { return rule; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword() { return cGreaterThanSignKeyword; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Store");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//Store:
		//	',';
		@Override public ParserRule getRule() { return rule; }
		
		//','
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}
	public class RecallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Recall");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//Recall:
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//'.'
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Assignment");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//Assignment:
		//	'=';
		@Override public ParserRule getRule() { return rule; }
		
		//'='
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}
	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Branch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBranchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Branch:
		//	{Branch} '(' body=Block ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Branch} '(' body=Block ')'
		public Group getGroup() { return cGroup; }
		
		//{Branch}
		public Action getBranchAction_0() { return cBranchAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Loop:
		//	{Loop} '[' body=Block ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Loop} '[' body=Block ']'
		public Group getGroup() { return cGroup; }
		
		//{Loop}
		public Action getLoopAction_0() { return cLoopAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class GOTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.GOTO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLabelLabelCrossReference_1_0 = (CrossReference)cLabelAssignment_1.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_1_0_1 = (RuleCall)cLabelLabelCrossReference_1_0.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GOTO:
		//	'\'' label=[Label] '\'';
		@Override public ParserRule getRule() { return rule; }
		
		//'\'' label=[Label] '\''
		public Group getGroup() { return cGroup; }
		
		//'\''
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//label=[Label]
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//[Label]
		public CrossReference getLabelLabelCrossReference_1_0() { return cLabelLabelCrossReference_1_0; }
		
		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_1_0_1() { return cLabelLabelIDTerminalRuleCall_1_0_1; }
		
		//'\''
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class ComputedGOTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.ComputedGOTO");
		private final Keyword cAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//ComputedGOTO:
		//	'&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&'
		public Keyword getAmpersandKeyword() { return cAmpersandKeyword; }
	}
	public class StaticDispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.StaticDispatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetFunctionCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetFunctionIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StaticDispatch:
		//	'{' target=[Function] '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' target=[Function] '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//target=[Function]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[Function]
		public CrossReference getTargetFunctionCrossReference_1_0() { return cTargetFunctionCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetFunctionIDTerminalRuleCall_1_0_1() { return cTargetFunctionIDTerminalRuleCall_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class DynamicDispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.DynamicDispatch");
		private final Keyword cQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//DynamicDispatch:
		//	'?';
		@Override public ParserRule getRule() { return rule; }
		
		//'?'
		public Keyword getQuestionMarkKeyword() { return cQuestionMarkKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final BlockElements pBlock;
	private final LabelElements pLabel;
	private final FunctionElements pFunction;
	private final InstructionElements pInstruction;
	private final IncrementElements pIncrement;
	private final DecrementElements pDecrement;
	private final MoveLeftElements pMoveLeft;
	private final MoveRightElements pMoveRight;
	private final StoreElements pStore;
	private final RecallElements pRecall;
	private final AssignmentElements pAssignment;
	private final BranchElements pBranch;
	private final LoopElements pLoop;
	private final GOTOElements pGOTO;
	private final ComputedGOTOElements pComputedGOTO;
	private final StaticDispatchElements pStaticDispatch;
	private final DynamicDispatchElements pDynamicDispatch;
	private final TerminalRule tID;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tWHITESPACE;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ElementalGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pBlock = new BlockElements();
		this.pLabel = new LabelElements();
		this.pFunction = new FunctionElements();
		this.pInstruction = new InstructionElements();
		this.pIncrement = new IncrementElements();
		this.pDecrement = new DecrementElements();
		this.pMoveLeft = new MoveLeftElements();
		this.pMoveRight = new MoveRightElements();
		this.pStore = new StoreElements();
		this.pRecall = new RecallElements();
		this.pAssignment = new AssignmentElements();
		this.pBranch = new BranchElements();
		this.pLoop = new LoopElements();
		this.pGOTO = new GOTOElements();
		this.pComputedGOTO = new ComputedGOTOElements();
		this.pStaticDispatch = new StaticDispatchElements();
		this.pDynamicDispatch = new DynamicDispatchElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.ID");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.COMMENT");
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.WHITESPACE");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.benjholla.elemental.Elemental".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	implicitFunction=Block
	//	explicitFunctions+=Function*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Block:
	//	{Block} instructions+=Instruction*;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Label:
	//	'"' name=ID '"';
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Function:
	//	name=ID ':' body=Block;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Instruction:
	//	{Instruction} Increment
	//	| {Instruction} Decrement
	//	| {Instruction} MoveLeft
	//	| {Instruction} MoveRight
	//	| {Instruction} Store
	//	| {Instruction} Recall
	//	| {Instruction} Assignment
	//	| Branch
	//	| Loop
	//	| GOTO
	//	| {Instruction} ComputedGOTO
	//	| StaticDispatch
	//	| {Instruction} DynamicDispatch;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Increment:
	//	'+';
	public IncrementElements getIncrementAccess() {
		return pIncrement;
	}
	
	public ParserRule getIncrementRule() {
		return getIncrementAccess().getRule();
	}
	
	//Decrement:
	//	'-';
	public DecrementElements getDecrementAccess() {
		return pDecrement;
	}
	
	public ParserRule getDecrementRule() {
		return getDecrementAccess().getRule();
	}
	
	//MoveLeft:
	//	'<';
	public MoveLeftElements getMoveLeftAccess() {
		return pMoveLeft;
	}
	
	public ParserRule getMoveLeftRule() {
		return getMoveLeftAccess().getRule();
	}
	
	//MoveRight:
	//	'>';
	public MoveRightElements getMoveRightAccess() {
		return pMoveRight;
	}
	
	public ParserRule getMoveRightRule() {
		return getMoveRightAccess().getRule();
	}
	
	//Store:
	//	',';
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Recall:
	//	'.';
	public RecallElements getRecallAccess() {
		return pRecall;
	}
	
	public ParserRule getRecallRule() {
		return getRecallAccess().getRule();
	}
	
	//Assignment:
	//	'=';
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Branch:
	//	{Branch} '(' body=Block ')';
	public BranchElements getBranchAccess() {
		return pBranch;
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}
	
	//Loop:
	//	{Loop} '[' body=Block ']';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//GOTO:
	//	'\'' label=[Label] '\'';
	public GOTOElements getGOTOAccess() {
		return pGOTO;
	}
	
	public ParserRule getGOTORule() {
		return getGOTOAccess().getRule();
	}
	
	//ComputedGOTO:
	//	'&';
	public ComputedGOTOElements getComputedGOTOAccess() {
		return pComputedGOTO;
	}
	
	public ParserRule getComputedGOTORule() {
		return getComputedGOTOAccess().getRule();
	}
	
	//StaticDispatch:
	//	'{' target=[Function] '}';
	public StaticDispatchElements getStaticDispatchAccess() {
		return pStaticDispatch;
	}
	
	public ParserRule getStaticDispatchRule() {
		return getStaticDispatchAccess().getRule();
	}
	
	//DynamicDispatch:
	//	'?';
	public DynamicDispatchElements getDynamicDispatchAccess() {
		return pDynamicDispatch;
	}
	
	public ParserRule getDynamicDispatchRule() {
		return getDynamicDispatchAccess().getRule();
	}
	
	//terminal ID:
	//	'0'..'9'*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal WHITESPACE:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
