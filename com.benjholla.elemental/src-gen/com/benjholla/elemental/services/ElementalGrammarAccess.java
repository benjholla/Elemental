/*
 * generated by Xtext 2.16.0
 */
package com.benjholla.elemental.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ElementalGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImplicitFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImplicitFunctionBlockParserRuleCall_0_0 = (RuleCall)cImplicitFunctionAssignment_0.eContents().get(0);
		private final Assignment cExplicitFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExplicitFunctionsFunctionParserRuleCall_1_0 = (RuleCall)cExplicitFunctionsAssignment_1.eContents().get(0);
		
		//Model:
		//	implicitFunction=Block
		//	explicitFunctions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//implicitFunction=Block explicitFunctions+=Function*
		public Group getGroup() { return cGroup; }
		
		//implicitFunction=Block
		public Assignment getImplicitFunctionAssignment_0() { return cImplicitFunctionAssignment_0; }
		
		//Block
		public RuleCall getImplicitFunctionBlockParserRuleCall_0_0() { return cImplicitFunctionBlockParserRuleCall_0_0; }
		
		//explicitFunctions+=Function*
		public Assignment getExplicitFunctionsAssignment_1() { return cExplicitFunctionsAssignment_1; }
		
		//Function
		public RuleCall getExplicitFunctionsFunctionParserRuleCall_1_0() { return cExplicitFunctionsFunctionParserRuleCall_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		
		//Block:
		//	{Block} instructions+=Instruction*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} instructions+=Instruction*
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Label:
		//	'"' name=ID '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"' name=ID '"'
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Function:
		//	name=ID ':' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' body=Block
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Instruction");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeIncrementParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeDecrementParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeMoveLeftParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		private final RuleCall cTypeMoveRightParserRuleCall_0_3 = (RuleCall)cTypeAlternatives_0.eContents().get(3);
		private final RuleCall cTypeStoreParserRuleCall_0_4 = (RuleCall)cTypeAlternatives_0.eContents().get(4);
		private final RuleCall cTypeRecallParserRuleCall_0_5 = (RuleCall)cTypeAlternatives_0.eContents().get(5);
		private final RuleCall cTypeAssignmentParserRuleCall_0_6 = (RuleCall)cTypeAlternatives_0.eContents().get(6);
		private final RuleCall cTypeBranchParserRuleCall_0_7 = (RuleCall)cTypeAlternatives_0.eContents().get(7);
		private final RuleCall cTypeLoopParserRuleCall_0_8 = (RuleCall)cTypeAlternatives_0.eContents().get(8);
		private final RuleCall cTypeLabelParserRuleCall_0_9 = (RuleCall)cTypeAlternatives_0.eContents().get(9);
		private final RuleCall cTypeGOTOParserRuleCall_0_10 = (RuleCall)cTypeAlternatives_0.eContents().get(10);
		private final RuleCall cTypeComputedGOTOParserRuleCall_0_11 = (RuleCall)cTypeAlternatives_0.eContents().get(11);
		private final RuleCall cTypeStaticDispatchParserRuleCall_0_12 = (RuleCall)cTypeAlternatives_0.eContents().get(12);
		private final RuleCall cTypeDynamicDispatchParserRuleCall_0_13 = (RuleCall)cTypeAlternatives_0.eContents().get(13);
		
		//Instruction:
		//	type=(Increment
		//	| Decrement
		//	| MoveLeft
		//	| MoveRight
		//	| Store
		//	| Recall
		//	| Assignment
		//	| Branch
		//	| Loop
		//	| Label
		//	| GOTO
		//	| ComputedGOTO
		//	| StaticDispatch
		//	| DynamicDispatch);
		@Override public ParserRule getRule() { return rule; }
		
		//type=(Increment | Decrement | MoveLeft | MoveRight | Store | Recall | Assignment | Branch | Loop | Label | GOTO |
		//ComputedGOTO | StaticDispatch | DynamicDispatch)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(Increment | Decrement | MoveLeft | MoveRight | Store | Recall | Assignment | Branch | Loop | Label | GOTO |
		//ComputedGOTO | StaticDispatch | DynamicDispatch)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//Increment
		public RuleCall getTypeIncrementParserRuleCall_0_0() { return cTypeIncrementParserRuleCall_0_0; }
		
		//Decrement
		public RuleCall getTypeDecrementParserRuleCall_0_1() { return cTypeDecrementParserRuleCall_0_1; }
		
		//MoveLeft
		public RuleCall getTypeMoveLeftParserRuleCall_0_2() { return cTypeMoveLeftParserRuleCall_0_2; }
		
		//MoveRight
		public RuleCall getTypeMoveRightParserRuleCall_0_3() { return cTypeMoveRightParserRuleCall_0_3; }
		
		//Store
		public RuleCall getTypeStoreParserRuleCall_0_4() { return cTypeStoreParserRuleCall_0_4; }
		
		//Recall
		public RuleCall getTypeRecallParserRuleCall_0_5() { return cTypeRecallParserRuleCall_0_5; }
		
		//Assignment
		public RuleCall getTypeAssignmentParserRuleCall_0_6() { return cTypeAssignmentParserRuleCall_0_6; }
		
		//Branch
		public RuleCall getTypeBranchParserRuleCall_0_7() { return cTypeBranchParserRuleCall_0_7; }
		
		//Loop
		public RuleCall getTypeLoopParserRuleCall_0_8() { return cTypeLoopParserRuleCall_0_8; }
		
		//Label
		public RuleCall getTypeLabelParserRuleCall_0_9() { return cTypeLabelParserRuleCall_0_9; }
		
		//GOTO
		public RuleCall getTypeGOTOParserRuleCall_0_10() { return cTypeGOTOParserRuleCall_0_10; }
		
		//ComputedGOTO
		public RuleCall getTypeComputedGOTOParserRuleCall_0_11() { return cTypeComputedGOTOParserRuleCall_0_11; }
		
		//StaticDispatch
		public RuleCall getTypeStaticDispatchParserRuleCall_0_12() { return cTypeStaticDispatchParserRuleCall_0_12; }
		
		//DynamicDispatch
		public RuleCall getTypeDynamicDispatchParserRuleCall_0_13() { return cTypeDynamicDispatchParserRuleCall_0_13; }
	}
	public class IncrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Increment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncrementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Increment:
		//	{Increment} '+';
		@Override public ParserRule getRule() { return rule; }
		
		//{Increment} '+'
		public Group getGroup() { return cGroup; }
		
		//{Increment}
		public Action getIncrementAction_0() { return cIncrementAction_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}
	public class DecrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Decrement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecrementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Decrement:
		//	{Decrement} '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{Decrement} '-'
		public Group getGroup() { return cGroup; }
		
		//{Decrement}
		public Action getDecrementAction_0() { return cDecrementAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class MoveLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.MoveLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveLeftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MoveLeft:
		//	{MoveLeft} '<';
		@Override public ParserRule getRule() { return rule; }
		
		//{MoveLeft} '<'
		public Group getGroup() { return cGroup; }
		
		//{MoveLeft}
		public Action getMoveLeftAction_0() { return cMoveLeftAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
	}
	public class MoveRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.MoveRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveRightAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MoveRight:
		//	{MoveRight} '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{MoveRight} '>'
		public Group getGroup() { return cGroup; }
		
		//{MoveRight}
		public Action getMoveRightAction_0() { return cMoveRightAction_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStoreAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Store:
		//	{Store} ',';
		@Override public ParserRule getRule() { return rule; }
		
		//{Store} ','
		public Group getGroup() { return cGroup; }
		
		//{Store}
		public Action getStoreAction_0() { return cStoreAction_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}
	public class RecallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Recall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Recall:
		//	{Recall} '.';
		@Override public ParserRule getRule() { return rule; }
		
		//{Recall} '.'
		public Group getGroup() { return cGroup; }
		
		//{Recall}
		public Action getRecallAction_0() { return cRecallAction_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Assignment:
		//	{Assignment} '=';
		@Override public ParserRule getRule() { return rule; }
		
		//{Assignment} '='
		public Group getGroup() { return cGroup; }
		
		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Branch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBranchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Branch:
		//	{Branch} '(' body=Block ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Branch} '(' body=Block ')'
		public Group getGroup() { return cGroup; }
		
		//{Branch}
		public Action getBranchAction_0() { return cBranchAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Loop:
		//	{Loop} '[' body=Block ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Loop} '[' body=Block ']'
		public Group getGroup() { return cGroup; }
		
		//{Loop}
		public Action getLoopAction_0() { return cLoopAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class GOTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.GOTO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGOTOAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLabelLabelCrossReference_2_0 = (CrossReference)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_2_0_1 = (RuleCall)cLabelLabelCrossReference_2_0.eContents().get(1);
		private final Keyword cApostropheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GOTO:
		//	{GOTO} '\'' label=[Label] '\'';
		@Override public ParserRule getRule() { return rule; }
		
		//{GOTO} '\'' label=[Label] '\''
		public Group getGroup() { return cGroup; }
		
		//{GOTO}
		public Action getGOTOAction_0() { return cGOTOAction_0; }
		
		//'\''
		public Keyword getApostropheKeyword_1() { return cApostropheKeyword_1; }
		
		//label=[Label]
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//[Label]
		public CrossReference getLabelLabelCrossReference_2_0() { return cLabelLabelCrossReference_2_0; }
		
		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_2_0_1() { return cLabelLabelIDTerminalRuleCall_2_0_1; }
		
		//'\''
		public Keyword getApostropheKeyword_3() { return cApostropheKeyword_3; }
	}
	public class ComputedGOTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.ComputedGOTO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComputedGOTOAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ComputedGOTO:
		//	{ComputedGOTO} '&';
		@Override public ParserRule getRule() { return rule; }
		
		//{ComputedGOTO} '&'
		public Group getGroup() { return cGroup; }
		
		//{ComputedGOTO}
		public Action getComputedGOTOAction_0() { return cComputedGOTOAction_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }
	}
	public class StaticDispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.StaticDispatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStaticDispatchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetFunctionCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetFunctionIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetFunctionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StaticDispatch:
		//	{StaticDispatch} '{' target=[Function] '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StaticDispatch} '{' target=[Function] '}'
		public Group getGroup() { return cGroup; }
		
		//{StaticDispatch}
		public Action getStaticDispatchAction_0() { return cStaticDispatchAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//target=[Function]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[Function]
		public CrossReference getTargetFunctionCrossReference_2_0() { return cTargetFunctionCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetFunctionIDTerminalRuleCall_2_0_1() { return cTargetFunctionIDTerminalRuleCall_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DynamicDispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.DynamicDispatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDynamicDispatchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DynamicDispatch:
		//	{DynamicDispatch} '?';
		@Override public ParserRule getRule() { return rule; }
		
		//{DynamicDispatch} '?'
		public Group getGroup() { return cGroup; }
		
		//{DynamicDispatch}
		public Action getDynamicDispatchAction_0() { return cDynamicDispatchAction_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final BlockElements pBlock;
	private final LabelElements pLabel;
	private final FunctionElements pFunction;
	private final InstructionElements pInstruction;
	private final IncrementElements pIncrement;
	private final DecrementElements pDecrement;
	private final MoveLeftElements pMoveLeft;
	private final MoveRightElements pMoveRight;
	private final StoreElements pStore;
	private final RecallElements pRecall;
	private final AssignmentElements pAssignment;
	private final BranchElements pBranch;
	private final LoopElements pLoop;
	private final GOTOElements pGOTO;
	private final ComputedGOTOElements pComputedGOTO;
	private final StaticDispatchElements pStaticDispatch;
	private final DynamicDispatchElements pDynamicDispatch;
	private final TerminalRule tID;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tWHITESPACE;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ElementalGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pBlock = new BlockElements();
		this.pLabel = new LabelElements();
		this.pFunction = new FunctionElements();
		this.pInstruction = new InstructionElements();
		this.pIncrement = new IncrementElements();
		this.pDecrement = new DecrementElements();
		this.pMoveLeft = new MoveLeftElements();
		this.pMoveRight = new MoveRightElements();
		this.pStore = new StoreElements();
		this.pRecall = new RecallElements();
		this.pAssignment = new AssignmentElements();
		this.pBranch = new BranchElements();
		this.pLoop = new LoopElements();
		this.pGOTO = new GOTOElements();
		this.pComputedGOTO = new ComputedGOTOElements();
		this.pStaticDispatch = new StaticDispatchElements();
		this.pDynamicDispatch = new DynamicDispatchElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.ID");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.COMMENT");
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.WHITESPACE");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.benjholla.elemental.Elemental.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.benjholla.elemental.Elemental".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	implicitFunction=Block
	//	explicitFunctions+=Function*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Block:
	//	{Block} instructions+=Instruction*;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Label:
	//	'"' name=ID '"';
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Function:
	//	name=ID ':' body=Block;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Instruction:
	//	type=(Increment
	//	| Decrement
	//	| MoveLeft
	//	| MoveRight
	//	| Store
	//	| Recall
	//	| Assignment
	//	| Branch
	//	| Loop
	//	| Label
	//	| GOTO
	//	| ComputedGOTO
	//	| StaticDispatch
	//	| DynamicDispatch);
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Increment:
	//	{Increment} '+';
	public IncrementElements getIncrementAccess() {
		return pIncrement;
	}
	
	public ParserRule getIncrementRule() {
		return getIncrementAccess().getRule();
	}
	
	//Decrement:
	//	{Decrement} '-';
	public DecrementElements getDecrementAccess() {
		return pDecrement;
	}
	
	public ParserRule getDecrementRule() {
		return getDecrementAccess().getRule();
	}
	
	//MoveLeft:
	//	{MoveLeft} '<';
	public MoveLeftElements getMoveLeftAccess() {
		return pMoveLeft;
	}
	
	public ParserRule getMoveLeftRule() {
		return getMoveLeftAccess().getRule();
	}
	
	//MoveRight:
	//	{MoveRight} '>';
	public MoveRightElements getMoveRightAccess() {
		return pMoveRight;
	}
	
	public ParserRule getMoveRightRule() {
		return getMoveRightAccess().getRule();
	}
	
	//Store:
	//	{Store} ',';
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Recall:
	//	{Recall} '.';
	public RecallElements getRecallAccess() {
		return pRecall;
	}
	
	public ParserRule getRecallRule() {
		return getRecallAccess().getRule();
	}
	
	//Assignment:
	//	{Assignment} '=';
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Branch:
	//	{Branch} '(' body=Block ')';
	public BranchElements getBranchAccess() {
		return pBranch;
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}
	
	//Loop:
	//	{Loop} '[' body=Block ']';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//GOTO:
	//	{GOTO} '\'' label=[Label] '\'';
	public GOTOElements getGOTOAccess() {
		return pGOTO;
	}
	
	public ParserRule getGOTORule() {
		return getGOTOAccess().getRule();
	}
	
	//ComputedGOTO:
	//	{ComputedGOTO} '&';
	public ComputedGOTOElements getComputedGOTOAccess() {
		return pComputedGOTO;
	}
	
	public ParserRule getComputedGOTORule() {
		return getComputedGOTOAccess().getRule();
	}
	
	//StaticDispatch:
	//	{StaticDispatch} '{' target=[Function] '}';
	public StaticDispatchElements getStaticDispatchAccess() {
		return pStaticDispatch;
	}
	
	public ParserRule getStaticDispatchRule() {
		return getStaticDispatchAccess().getRule();
	}
	
	//DynamicDispatch:
	//	{DynamicDispatch} '?';
	public DynamicDispatchElements getDynamicDispatchAccess() {
		return pDynamicDispatch;
	}
	
	public ParserRule getDynamicDispatchRule() {
		return getDynamicDispatchAccess().getRule();
	}
	
	//terminal ID:
	//	'0'..'9'*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal WHITESPACE:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
