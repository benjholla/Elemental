/*
 * generated by Xtext 2.16.0
 */
package com.benjholla.elemental.serializer;

import com.benjholla.elemental.services.ElementalGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ElementalSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ElementalGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Instruction_AssignmentParserRuleCall_6_1_or_ComputedGOTOParserRuleCall_10_1_or_DecrementParserRuleCall_1_1_or_DynamicDispatchParserRuleCall_12_1_or_IncrementParserRuleCall_0_1_or_MoveLeftParserRuleCall_2_1_or_MoveRightParserRuleCall_3_1_or_RecallParserRuleCall_5_1_or_StoreParserRuleCall_4_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ElementalGrammarAccess) access;
		match_Instruction_AssignmentParserRuleCall_6_1_or_ComputedGOTOParserRuleCall_10_1_or_DecrementParserRuleCall_1_1_or_DynamicDispatchParserRuleCall_12_1_or_IncrementParserRuleCall_0_1_or_MoveLeftParserRuleCall_2_1_or_MoveRightParserRuleCall_3_1_or_RecallParserRuleCall_5_1_or_StoreParserRuleCall_4_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInstructionAccess().getAssignmentParserRuleCall_6_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getComputedGOTOParserRuleCall_10_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getDecrementParserRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getDynamicDispatchParserRuleCall_12_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getIncrementParserRuleCall_0_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getMoveLeftParserRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getMoveRightParserRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getRecallParserRuleCall_5_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getStoreParserRuleCall_4_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAssignmentRule())
			return getAssignmentToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getComputedGOTORule())
			return getComputedGOTOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDecrementRule())
			return getDecrementToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDynamicDispatchRule())
			return getDynamicDispatchToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIncrementRule())
			return getIncrementToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMoveLeftRule())
			return getMoveLeftToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMoveRightRule())
			return getMoveRightToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRecallRule())
			return getRecallToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStoreRule())
			return getStoreToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Assignment:
	 * 	'=';
	 */
	protected String getAssignmentToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * ComputedGOTO:
	 * 	'&';
	 */
	protected String getComputedGOTOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&";
	}
	
	/**
	 * Decrement:
	 * 	'-';
	 */
	protected String getDecrementToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	/**
	 * DynamicDispatch:
	 * 	'?';
	 */
	protected String getDynamicDispatchToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "?";
	}
	
	/**
	 * Increment:
	 * 	'+';
	 */
	protected String getIncrementToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * MoveLeft:
	 * 	'<';
	 */
	protected String getMoveLeftToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<";
	}
	
	/**
	 * MoveRight:
	 * 	'>';
	 */
	protected String getMoveRightToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ">";
	}
	
	/**
	 * Recall:
	 * 	'.';
	 */
	protected String getRecallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * Store:
	 * 	',';
	 */
	protected String getStoreToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Instruction_AssignmentParserRuleCall_6_1_or_ComputedGOTOParserRuleCall_10_1_or_DecrementParserRuleCall_1_1_or_DynamicDispatchParserRuleCall_12_1_or_IncrementParserRuleCall_0_1_or_MoveLeftParserRuleCall_2_1_or_MoveRightParserRuleCall_3_1_or_RecallParserRuleCall_5_1_or_StoreParserRuleCall_4_1.equals(syntax))
				emit_Instruction_AssignmentParserRuleCall_6_1_or_ComputedGOTOParserRuleCall_10_1_or_DecrementParserRuleCall_1_1_or_DynamicDispatchParserRuleCall_12_1_or_IncrementParserRuleCall_0_1_or_MoveLeftParserRuleCall_2_1_or_MoveRightParserRuleCall_3_1_or_RecallParserRuleCall_5_1_or_StoreParserRuleCall_4_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (
	  *         Increment | 
	  *         Decrement | 
	  *         MoveLeft | 
	  *         MoveRight | 
	  *         Store | 
	  *         Recall | 
	  *         Assignment | 
	  *         ComputedGOTO | 
	  *         DynamicDispatch
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Instruction_AssignmentParserRuleCall_6_1_or_ComputedGOTOParserRuleCall_10_1_or_DecrementParserRuleCall_1_1_or_DynamicDispatchParserRuleCall_12_1_or_IncrementParserRuleCall_0_1_or_MoveLeftParserRuleCall_2_1_or_MoveRightParserRuleCall_3_1_or_RecallParserRuleCall_5_1_or_StoreParserRuleCall_4_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
