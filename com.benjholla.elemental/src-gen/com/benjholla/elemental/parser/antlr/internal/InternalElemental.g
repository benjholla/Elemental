/*
 * generated by Xtext 2.16.0
 */
grammar InternalElemental;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.benjholla.elemental.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.benjholla.elemental.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.benjholla.elemental.services.ElementalGrammarAccess;

}

@parser::members {

 	private ElementalGrammarAccess grammarAccess;

    public InternalElementalParser(TokenStream input, ElementalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ElementalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImplicitFunctionBlockParserRuleCall_0_0());
				}
				lv_implicitFunction_0_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"implicitFunction",
						lv_implicitFunction_0_0,
						"com.benjholla.elemental.Elemental.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getExplicitFunctionsFunctionParserRuleCall_1_0());
				}
				lv_explicitFunctions_1_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"explicitFunctions",
						lv_explicitFunctions_1_0,
						"com.benjholla.elemental.Elemental.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_1_0());
				}
				lv_instructions_1_0=ruleInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"instructions",
						lv_instructions_1_0,
						"com.benjholla.elemental.Elemental.Instruction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"com.benjholla.elemental.Elemental.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getBodyBlockParserRuleCall_2_0());
				}
				lv_body_2_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"com.benjholla.elemental.Elemental.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getInstructionAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getIncrementParserRuleCall_0_1());
			}
			ruleIncrement
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getInstructionAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getDecrementParserRuleCall_1_1());
			}
			ruleDecrement
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getInstructionAction_2_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getMoveLeftParserRuleCall_2_1());
			}
			ruleMoveLeft
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getInstructionAction_3_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getMoveRightParserRuleCall_3_1());
			}
			ruleMoveRight
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getInstructionAction_4_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getStoreParserRuleCall_4_1());
			}
			ruleStore
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getInstructionAction_5_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getRecallParserRuleCall_5_1());
			}
			ruleRecall
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getInstructionAction_6_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getAssignmentParserRuleCall_6_1());
			}
			ruleAssignment
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getBranchParserRuleCall_7());
		}
		this_Branch_14=ruleBranch
		{
			$current = $this_Branch_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getLoopParserRuleCall_8());
		}
		this_Loop_15=ruleLoop
		{
			$current = $this_Loop_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getGOTOParserRuleCall_9());
		}
		this_GOTO_16=ruleGOTO
		{
			$current = $this_GOTO_16.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getInstructionAction_10_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getComputedGOTOParserRuleCall_10_1());
			}
			ruleComputedGOTO
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getStaticDispatchParserRuleCall_11());
		}
		this_StaticDispatch_19=ruleStaticDispatch
		{
			$current = $this_StaticDispatch_19.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInstructionAccess().getInstructionAction_12_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getDynamicDispatchParserRuleCall_12_1());
			}
			ruleDynamicDispatch
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleIncrement
entryRuleIncrement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIncrementRule()); }
	iv_ruleIncrement=ruleIncrement
	{ $current=$iv_ruleIncrement.current.getText(); }
	EOF;

// Rule Increment
ruleIncrement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='+'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIncrementAccess().getPlusSignKeyword());
	}
;

// Entry rule entryRuleDecrement
entryRuleDecrement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDecrementRule()); }
	iv_ruleDecrement=ruleDecrement
	{ $current=$iv_ruleDecrement.current.getText(); }
	EOF;

// Rule Decrement
ruleDecrement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='-'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDecrementAccess().getHyphenMinusKeyword());
	}
;

// Entry rule entryRuleMoveLeft
entryRuleMoveLeft returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMoveLeftRule()); }
	iv_ruleMoveLeft=ruleMoveLeft
	{ $current=$iv_ruleMoveLeft.current.getText(); }
	EOF;

// Rule MoveLeft
ruleMoveLeft returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='<'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMoveLeftAccess().getLessThanSignKeyword());
	}
;

// Entry rule entryRuleMoveRight
entryRuleMoveRight returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMoveRightRule()); }
	iv_ruleMoveRight=ruleMoveRight
	{ $current=$iv_ruleMoveRight.current.getText(); }
	EOF;

// Rule MoveRight
ruleMoveRight returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='>'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMoveRightAccess().getGreaterThanSignKeyword());
	}
;

// Entry rule entryRuleStore
entryRuleStore returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	iv_ruleStore=ruleStore
	{ $current=$iv_ruleStore.current.getText(); }
	EOF;

// Rule Store
ruleStore returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=','
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getStoreAccess().getCommaKeyword());
	}
;

// Entry rule entryRuleRecall
entryRuleRecall returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRecallRule()); }
	iv_ruleRecall=ruleRecall
	{ $current=$iv_ruleRecall.current.getText(); }
	EOF;

// Rule Recall
ruleRecall returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRecallAccess().getFullStopKeyword());
	}
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current.getText(); }
	EOF;

// Rule Assignment
ruleAssignment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='='
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getAssignmentAccess().getEqualsSignKeyword());
	}
;

// Entry rule entryRuleBranch
entryRuleBranch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBranchRule()); }
	iv_ruleBranch=ruleBranch
	{ $current=$iv_ruleBranch.current; }
	EOF;

// Rule Branch
ruleBranch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBranchAccess().getBranchAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBranchAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBranchAccess().getBodyBlockParserRuleCall_2_0());
				}
				lv_body_2_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBranchRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"com.benjholla.elemental.Elemental.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getBranchAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleLoop=ruleLoop
	{ $current=$iv_ruleLoop.current; }
	EOF;

// Rule Loop
ruleLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLoopAccess().getLoopAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getLoopAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getBodyBlockParserRuleCall_2_0());
				}
				lv_body_2_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"com.benjholla.elemental.Elemental.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoopAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleGOTO
entryRuleGOTO returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGOTORule()); }
	iv_ruleGOTO=ruleGOTO
	{ $current=$iv_ruleGOTO.current; }
	EOF;

// Rule GOTO
ruleGOTO returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='\''
		{
			newLeafNode(otherlv_0, grammarAccess.getGOTOAccess().getApostropheKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGOTORule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getGOTOAccess().getLabelLabelCrossReference_1_0());
				}
			)
		)
		otherlv_2='\''
		{
			newLeafNode(otherlv_2, grammarAccess.getGOTOAccess().getApostropheKeyword_2());
		}
	)
;

// Entry rule entryRuleComputedGOTO
entryRuleComputedGOTO returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComputedGOTORule()); }
	iv_ruleComputedGOTO=ruleComputedGOTO
	{ $current=$iv_ruleComputedGOTO.current.getText(); }
	EOF;

// Rule ComputedGOTO
ruleComputedGOTO returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='&'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getComputedGOTOAccess().getAmpersandKeyword());
	}
;

// Entry rule entryRuleStaticDispatch
entryRuleStaticDispatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStaticDispatchRule()); }
	iv_ruleStaticDispatch=ruleStaticDispatch
	{ $current=$iv_ruleStaticDispatch.current; }
	EOF;

// Rule StaticDispatch
ruleStaticDispatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getStaticDispatchAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStaticDispatchRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getStaticDispatchAccess().getTargetFunctionCrossReference_1_0());
				}
			)
		)
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getStaticDispatchAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleDynamicDispatch
entryRuleDynamicDispatch returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDynamicDispatchRule()); }
	iv_ruleDynamicDispatch=ruleDynamicDispatch
	{ $current=$iv_ruleDynamicDispatch.current.getText(); }
	EOF;

// Rule DynamicDispatch
ruleDynamicDispatch returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='?'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDynamicDispatchAccess().getQuestionMarkKeyword());
	}
;

RULE_ID : ('0'..'9')*;

RULE_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WHITESPACE : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
